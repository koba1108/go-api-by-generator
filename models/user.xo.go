// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// User represents a row from 'public.users'.
type User struct {
	ID uint64 `json:"id"` // id
	Name sql.NullString `json:"name"` // name
	Age int8 `json:"age"` // age
	Weight sql.NullInt64 `json:"weight"` // weight
	CreatedAt time.Time `json:"created_at"` // created_at
	UpdatedAt time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool

}


// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}



	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO public.users (` +
		`name, age, weight, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, u.Name, u.Age, u.Weight, u.CreatedAt, u.UpdatedAt)
	res, err := db.Exec(sqlstr, u.Name, u.Age, u.Weight, u.CreatedAt, u.UpdatedAt)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	u.ID = uint64(id)
	u._exists = true


	return nil
}


	// Update updates the User in the database.
	func (u *User) Update(db XODB) error {
		var err error

		// if doesn't exist, bail
		if !u._exists {
			return errors.New("update failed: does not exist")
		}

		// if deleted, bail
		if u._deleted {
			return errors.New("update failed: marked for deletion")
		}


			// sql query
			const sqlstr = `UPDATE public.users SET ` +
				`name = ?, age = ?, weight = ?, created_at = ?, updated_at = ?` +
				` WHERE id = ?`

			// run query
			XOLog(sqlstr, u.Name, u.Age, u.Weight, u.CreatedAt, u.UpdatedAt, u.ID)
			_, err = db.Exec(sqlstr, u.Name, u.Age, u.Weight, u.CreatedAt, u.UpdatedAt, u.ID)
			return err
	}

	// Save saves the User to the database.
	func (u *User) Save(db XODB) error {
		if u.Exists() {
			return u.Update(db)
		}

		return u.Insert(db)
	}


// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}


		// sql query
		const sqlstr = `DELETE FROM public.users WHERE id = ?`

		// run query
		XOLog(sqlstr, u.ID)
		_, err = db.Exec(sqlstr, u.ID)
		if err != nil {
			return err
		}

	// set deleted
	u._deleted = true

	return nil
}

// UserByID retrieves a row from 'public.users' as a User.
//
// Generated from index 'id'.
func UserByID(db XODB, id uint64) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, age, weight, created_at, updated_at ` +
		`FROM public.users ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Name, &u.Age, &u.Weight, &u.CreatedAt, &u.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
