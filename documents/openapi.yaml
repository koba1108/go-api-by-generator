openapi: "3.0.0"
info:
  title: "HogeHoge"
  version: "1.0.0"
servers:
  - url: "http://localhost:9002"
    description: "Localhost server"
  # todo: 各サーバURLの設置
  - url: "http://dev.api.example.com"
    description: "Development server"
  - url: "https://api.example.com"
    description: "Production server"
tags:
  - name: "User"
    description: "ユーザー"
  - name: "Like"
    description: "いいね"
  - name: "Skip"
    description: "スキップ"
  - name: "ChatRoom"
    description: "チャットルーム"
  - name: "Message"
    description: "メッセージ"
  - name: "Block"
    description: "ブロック"
  - name: "Notification"
    description: "お知らせ"
  - name: "Bonus"
    description: "ボーナス"
  - name: "Template"
    description: "メッセージテンプレート"
  - name: "SettingNotification"
    description: "通知設定"
  - name: "Searche"
    description: "検索条件"
  - name: "Inquiry"
    description: "問い合わせ"
  - name: "UserRecommend"
    description: "おすすめユーザー"
  - name: "Identifications"
    description: "身分証"
  - name: "Image"
    description: "画像"
  - name: "Subscriptions"
    description: "定期購読商品"
  - name: "Products"
    description: "買い切り商品"
  - name: "ExchangeItem"
    description: "交換用商品"
paths:
  /user:
    get:
      tags:
        - "User"
      summary: "ユーザー取得"
      security:
        - Bearer: []
      operationId: "getUser"
      responses:
        200:
          description: "ユーザの情報を返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGetResponse'
        400:
          description: "NG"
    put:
      tags:
        - "User"
      summary: "ユーザー登録"
      security:
        - Bearer: []
      operationId: "addUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPutRequests"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"
    post:
      tags:
        - "User"
      summary: "ユーザー更新"
      security:
        - Bearer: []
      operationId: "editUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPostRequests"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"
    delete:
      tags:
        - "User"
      summary: "ユーザー退会"
      security:
        - Bearer: []
      operationId: "delUser"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /users:
    get:
      tags:
        - "User"
      summary: "ユーザー一覧"
      security:
        - Bearer: []
      operationId: "getUsers"
      parameters: # リクエストパラメータ
        - name: "order_by"
          description: "並び順"
          in: "query"
          schema:
            type: "string"
        - name: "limit"
          description: "取得件数"
          in: "query"
          schema:
            type: "integer"
        - name: "offset"
          description: "開始位置"
          in: "query"
          schema:
            type: "integer"
        - name: "page"
          description: "検索条件"
          in: "query"
          schema:
            type: "object"
            properties:
              search:
                $ref: '#/components/schemas/UserSearchConditions'
      responses:
        200:
          description: "ユーザの一覧を返します"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  users:
                    type: "array"
                    items:
                      $ref: '#/components/schemas/UserGetResponse'
                  totalCount:
                    type: "integer"
                    description: "総件数"
                  offset:
                    type: "integer"
                    description: "開始位置"
                  limit:
                    type: "integer"
                    description: "取得件数"
        400:
          description: "NG"

  /likes/:
    get:
      tags:
        - "Like"
      summary: "いいねした人一覧"
      security:
        - Bearer: []
      operationId: "getLikes"
      parameters: # リクエストパラメータ
        - name: "limit"
          description: "取得件数"
          in: "query"
          schema:
            type: "integer"
        - name: "offset"
          description: "開始位置"
          in: "query"
          schema:
            type: "integer"
      responses:
        200:
          description: "いいねした人の一覧を返します"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  likes:
                    type: "array"
                    items:
                      $ref: '#/components/schemas/LikeGetResponse'
                  totalCount:
                    type: "integer"
                    description: "総件数"
                  offset:
                    type: "integer"
                    description: "開始位置"
                  limit:
                    type: "integer"
                    description: "取得件数"
        400:
          description: "NG"

  /liked/:
    get:
      tags:
        - "Like"
      summary: "いいねされた人一覧"
      security:
        - Bearer: []
      operationId: "getLiked"
      parameters: # リクエストパラメータ
        - name: "limit"
          description: "取得件数"
          in: "query"
          schema:
            type: "integer"
        - name: "offset"
          description: "開始位置"
          in: "query"
          schema:
            type: "integer"
      responses:
        200:
          description: "いいねされた人の一覧を返します"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  likes:
                    type: "array"
                    items:
                      $ref: '#/components/schemas/LikeGetResponse'
                  totalCount:
                    type: "integer"
                    description: "総件数"
                  offset:
                    type: "integer"
                    description: "開始位置"
                  limit:
                    type: "integer"
                    description: "取得件数"
        400:
          description: "NG"

  /like/{userId}/:
    put:
      tags:
        - "Like"
      summary: "いいね"
      security:
        - Bearer: []
      operationId: "addLike"
      parameters: # リクエストパラメータ
        - name: "userId"
          in: 'path' # パラメータをパス内に含める
          description: "ユーザーID"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /like/{likeId}/thanks:
    post:
      tags:
        - "Like"
      summary: "ありがとう"
      security:
        - Bearer: []
      operationId: "editLikeThanks"
      parameters: # リクエストパラメータ
        - name: "likeId"
          in: 'path' # パラメータをパス内に含める
          description: "いいねID"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /like/{likeId}/skip:
    post:
      tags:
        - "Like"
      summary: "スキップ"
      security:
        - Bearer: []
      operationId: "editLikeSkip"
      parameters: # リクエストパラメータ
        - name: "likeId"
          in: 'path' # パラメータをパス内に含める
          description: "いいねID"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /skips/:
    get:
      tags:
        - "Skip"
      summary: "スキップした人一覧"
      security:
        - Bearer: []
      operationId: "getSkips"
      parameters: # リクエストパラメータ
        - name: "limit"
          description: "取得件数"
          in: "query"
          schema:
            type: "integer"
        - name: "offset"
          description: "開始位置"
          in: "query"
          schema:
            type: "integer"
      responses:
        200:
          description: "スキップした人の一覧を返します"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  skips:
                    type: "array"
                    items:
                      $ref: '#/components/schemas/SkipGetResponse'
                  totalCount:
                    type: "integer"
                    description: "総件数"
                  offset:
                    type: "integer"
                    description: "開始位置"
                  limit:
                    type: "integer"
                    description: "取得件数"
        400:
          description: "NG"

  /chat_rooms/:
    get:
      tags:
        - "ChatRoom"
      summary: "チャットルーム一覧"
      security:
        - Bearer: []
      operationId: "getChatRooms"
      parameters: # リクエストパラメータ
        - name: "limit"
          description: "取得件数"
          in: "query"
          schema:
            type: "integer"
        - name: "offset"
          description: "開始位置"
          in: "query"
          schema:
            type: "integer"
      responses:
        200:
          description: "チャットルームの一覧を返します"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  chat_rooms:
                    type: "array"
                    items:
                      $ref: '#/components/schemas/ChatRoomGetResponse'
                  totalCount:
                    type: "integer"
                    description: "総件数"
                  offset:
                    type: "integer"
                    description: "開始位置"
                  limit:
                    type: "integer"
                    description: "取得件数"
        400:
          description: "NG"

  /chat_rooms/{roomId}/:
    post:
      tags:
        - "ChatRoom"
      summary: "チャットルーム更新"
      security:
        - Bearer: []
      operationId: "editChatRooms"
      parameters: # リクエストパラメータ
        - name: "roomId"
          in: "path" # パラメータをパス内に含める
          description: "チャットルームID"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /messages/{userId}/:
    get:
      tags:
        - "Message"
      summary: "メッセージ一覧"
      security:
        - Bearer: []
      operationId: "getMessages"
      parameters: # リクエストパラメータ
        - name: "userId"
          description: "ユーザーID"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "limit"
          description: "取得件数"
          in: "query"
          schema:
            type: "integer"
        - name: "offset"
          description: "開始位置"
          in: "query"
          schema:
            type: "integer"
      responses:
        200:
          description: "チャットルームの一覧を返します"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  messages:
                    type: "array"
                    items:
                      $ref: '#/components/schemas/MessageGetResponse'
                  totalCount:
                    type: "integer"
                    description: "総件数"
                  offset:
                    type: "integer"
                    description: "開始位置"
                  limit:
                    type: "integer"
                    description: "取得件数"
        400:
          description: "NG"
    put:
      tags:
        - "Message"
      summary: "メッセージ登録"
      security:
        - Bearer: []
      operationId: "addMessage"
      parameters: # リクエストパラメータ
        - name: "userId"
          in: 'path' # パラメータをパス内に含める
          description: "ユーザーID"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "chat_room_id"
                - "message"
              properties:
                chat_room_id:
                  type: "integer"
                  description: "チャットルームID"
                message:
                  type: "string"
                  description: "メッセージ"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /messages/{messageId}/:
    post:
      tags:
        - "Message"
      summary: "メッセージ更新"
      security:
        - Bearer: []
      operationId: "editMessage"
      parameters: # リクエストパラメータ
        - name: "messageId"
          in: 'path' # パラメータをパス内に含める
          description: "メッセージID"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "message"
              properties:
                message:
                  type: "string"
                  description: "メッセージ"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"
    delete:
      tags:
        - "Message"
      summary: "メッセージ削除"
      security:
        - Bearer: []
      operationId: "delMessage"
      parameters: # リクエストパラメータ
        - name: "messageId"
          in: 'path' # パラメータをパス内に含める
          description: "メッセージID"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /blocks/:
    get:
      tags:
        - "Block"
      summary: "ブロックした人一覧"
      security:
        - Bearer: []
      operationId: "getBlocks"
      parameters: # リクエストパラメータ
        - name: "limit"
          description: "取得件数"
          in: "query"
          schema:
            type: "integer"
        - name: "offset"
          description: "開始位置"
          in: "query"
          schema:
            type: "integer"
      responses:
        200:
          description: "ブロックした人の一覧を返します"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  blocks:
                    type: "array"
                    items:
                      $ref: '#/components/schemas/BlockGetResponse'
                  totalCount:
                    type: "integer"
                    description: "総件数"
                  offset:
                    type: "integer"
                    description: "開始位置"
                  limit:
                    type: "integer"
                    description: "取得件数"
        400:
          description: "NG"
    put:
      tags:
        - "Block"
      summary: "ブロック登録"
      security:
        - Bearer: []
      operationId: "addBlock"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "reason_id"
                - "blocked_user_id"
              properties:
                reason_id:
                  type: "integer"
                  description: "ブロック理由"
                blocked_user_id:
                  type: "integer"
                  description: "ブロックされたユーザーID"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /blocks/{blockId}/:
    delete:
      tags:
        - "Block"
      summary: "ブロック削除"
      security:
        - Bearer: []
      operationId: "delBlock"
      parameters: # リクエストパラメータ
        - name: "blockId"
          in: "path" # パラメータをパス内に含める
          description: "ブロックID"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /notifications/:
    get:
      tags:
        - "Notification"
      summary: "お知らせ一覧"
      security:
        - Bearer: []
      operationId: "getNotifications"
      parameters: # リクエストパラメータ
        - name: "limit"
          description: "取得件数"
          in: "query"
          schema:
            type: "integer"
        - name: "offset"
          description: "開始位置"
          in: "query"
          schema:
            type: "integer"
      responses:
        200:
          description: "お知らせの一覧を返します"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  notifications:
                    type: "array"
                    items:
                      $ref: '#/components/schemas/NotificationGetResponse'
                  totalCount:
                    type: "integer"
                    description: "総件数"
                  offset:
                    type: "integer"
                    description: "開始位置"
                  limit:
                    type: "integer"
                    description: "取得件数"
        400:
          description: "NG"

  /notifications/{notificationId}:
    post:
      tags:
        - "Notification"
      summary: "お知らせ既読"
      security:
        - Bearer: []
      operationId: "readNotification"
      parameters: # リクエストパラメータ
        - name: "notificationId"
          in: "path" # パラメータをパス内に含める
          description: "お知らせID"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /login_bonus/:
    post:
      tags:
        - "Bonus"
      summary: "ログインボーナス"
      security:
        - Bearer: []
      operationId: "addBonus"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /templates/messages/:
    get:
      tags:
        - "Template"
      summary: "メッセージテンプレ一覧"
      security:
        - Bearer: []
      operationId: "getTemplatesMessages"
      parameters: # リクエストパラメータ
        - name: "limit"
          description: "取得件数"
          in: "query"
          schema:
            type: "integer"
        - name: "offset"
          description: "開始位置"
          in: "query"
          schema:
            type: "integer"
      responses:
        200:
          description: "メッセージテンプレトの一覧を返します"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  templates:
                    type: "array"
                    items:
                      $ref: '#/components/schemas/TemplateGetResponse'
                  totalCount:
                    type: "integer"
                    description: "総件数"
                  offset:
                    type: "integer"
                    description: "開始位置"
                  limit:
                    type: "integer"
                    description: "取得件数"
        400:
          description: "NG"
    put:
      tags:
        - "Template"
      summary: "メッセージテンプレ登録"
      security:
        - Bearer: []
      operationId: "addTemplatesMessage"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "type"
              properties:
                type:
                  type: "integer"
                  description: "種別"
                contents:
                  type: "string"
                  description: "本文"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /templates/messages/{msgTemplateId}:
    post:
      tags:
        - "Template"
      summary: "メッセージテンプレ更新"
      security:
        - Bearer: []
      operationId: "editTemplatesMessage"
      parameters: # リクエストパラメータ
        - name: "msgTemplateId"
          in: 'path' # パラメータをパス内に含める
          description: "メッセージテンプレトID"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "type"
              properties:
                type:
                  type: "integer"
                  description: "種別"
                contents:
                  type: "string"
                  description: "本文"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"
    delete:
      tags:
        - "Template"
      summary: "メッセージテンプレ削除"
      security:
        - Bearer: []
      operationId: "delTemplatesMessage"
      parameters: # リクエストパラメータ
        - name: "msgTemplateId"
          in: 'path' # パラメータをパス内に含める
          description: "メッセージテンプレトID"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /settings/notifications/:
    get:
      tags:
        - "SettingNotification"
      summary: "通知設定の取得"
      operationId: "getSettingNotification"
      security:
        - Bearer: []
      responses:
        200:
          description: "通知設定を返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationSettings'
        400:
          description: "NG"
    post:
      tags:
        - "SettingNotification"
      summary: "通知設定の更新"
      security:
        - Bearer: []
      operationId: "editSettingNotification"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                notification_type:
                  type: "integer"
                  description: "通知タイプ"
                recieved_likes:
                  type: "boolean"
                  description: "いいね！をもらった時"
                matching:
                  type: "boolean"
                  description: "マッチングした時"
                recieved_message:
                  type: "boolean"
                  description: "メッセージをもらった時"
                footprint:
                  type: "boolean"
                  description: "足あとがついた時"
                others:
                  type: "boolean"
                  description: "その他のお知らせ"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /settings/searches/:
    get:
      tags:
        - "Searche"
      summary: "検索条件の取得"
      security:
        - Bearer: []
      responses:
        200:
          description: "検索条件を返します"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSearchConditions'
        400:
          description: "NG"
    put:
      tags:
        - "Searche"
      summary: "検索条件登録"
      security:
        - Bearer: []
      operationId: "addSearche"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchPutAndPostRequest'
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /settings/searches/{id}/:
    post:
      tags:
        - "Searche"
      summary: "検索条件更新"
      operationId: "editSearche"
      parameters: # リクエストパラメータ
        - name: "id"
          in: 'path' # パラメータをパス内に含める
          description: "ID"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchPutAndPostRequest"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /inquiry/:
    put:
      tags:
        - "Inquiry"
      summary: "問い合わせ登録"
      security:
        - Bearer: []
      operationId: "addInquiry"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                type:
                  type: "integer"
                  description: "問い合わせ種別"
                contents:
                  type: "string"
                  description: "問い合わせ内容"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /users/recommends/:
    get:
      tags:
        - "UserRecommend"
      summary: "おすすめユーザー一覧"
      security:
        - Bearer: []
      operationId: "getUsersRecommends"
      parameters: # リクエストパラメータ
        - name: "order_by"
          description: "並び順"
          in: "query"
          schema:
            type: "string"
        - name: "limit"
          description: "取得件数"
          in: "query"
          schema:
            type: "integer"
        - name: "offset"
          description: "開始位置"
          in: "query"
          schema:
            type: "integer"
      responses:
        200:
          description: "おすすめユーザーの一覧を返します"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  users:
                    type: "array"
                    items:
                      $ref: '#/components/schemas/UserGetResponse'
                  totalCount:
                    type: "integer"
                    description: "総件数"
                  offset:
                    type: "integer"
                    description: "開始位置"
                  limit:
                    type: "integer"
                    description: "取得件数"
        400:
          description: "NG"

  /users/recommends/@userId/like:
    post:
      tags:
        - "UserRecommend"
      summary: "おすすめユーザーへのいいね"
      security:
        - Bearer: []
      operationId: "editUsersRecommendsLike"
      parameters: # リクエストパラメータ
        - name: "userId"
          in: 'path' # パラメータをパス内に含める
          description: "ユーザーID"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /users/recommends/@userId/skip:
    post:
      tags:
        - "UserRecommend"
      summary: "おすすめユーザーへのスキップ"
      security:
        - Bearer: []
      operationId: "editUsersRecommendsSkip"
      parameters: # リクエストパラメータ
        - name: "userId"
          in: 'path' # パラメータをパス内に含める
          description: "ユーザーID"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /upload/identifications/:
    put:
      tags:
        - "Identifications"
      summary: "身分証登録"
      security:
        - Bearer: []
      operationId: "addIdentifications"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                storage_path:
                  type: "string"
                  description: "ストレージパス"
                download_url:
                  type: "string"
                  description: "画像URL"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /upload/images/:
    put:
      tags:
        - "Image"
      summary: "プロフ画像の登録"
      security:
        - Bearer: []
      operationId: "addImage"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                storage_path:
                  type: "string"
                  description: "ストレージパス"
                download_url:
                  type: "string"
                  description: "画像URL"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /upload/images/{imageId}/:
    post:
      tags:
        - "Image"
      summary: "プロフ画像の更新"
      security:
        - Bearer: []
      operationId: "editImage"
      parameters: # リクエストパラメータ
        - name: "imageId"
          in: 'path' # パラメータをパス内に含める
          description: "ユーザー画像ID"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                storage_path:
                  type: "string"
                  description: "ストレージパス"
                download_url:
                  type: "string"
                  description: "画像URL"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"
    delete:
      tags:
        - "Image"
      summary: "プロフ画像の削除"
      security:
        - Bearer: []
      operationId: "delImage"
      parameters: # リクエストパラメータ
        - name: "imageId"
          in: 'path' # パラメータをパス内に含める
          description: "ユーザー画像ID"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

  /shop/{type}/subscriptions/:
    get:
      tags:
        - "Subscriptions"
      summary: "定期購読商品の取得"
      security:
        - Bearer: []
      operationId: "getSubscriptions"
      parameters: # リクエストパラメータ
        - name: "type"
          in: 'path' # パラメータをパス内に含める
          description: "ios, androidを指定"
          required: true
          schema:
            type: "string"
        - name: "subscriptionId"
          in: 'query'
          description: "定期購読商品ID"
          schema:
            type: "integer"
      responses:
        200:
          description: "定期購読商品の一覧を返します"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    id:
                      type: "integer"
                      description: "ID"
                    name:
                      type: "string"
                      description: "定期購読商品名"
        400:
          description: "NG"

  /shop/{type}/products/:
    get:
      tags:
        - "Products"
      summary: "買い切り商品を取得"
      security:
        - Bearer: []
      operationId: "getProducts"
      parameters: # リクエストパラメータ
        - name: "type"
          in: 'path' # パラメータをパス内に含める
          description: "ios, androidを指定"
          required: true
          schema:
            type: "string"
        - name: "productId"
          in: 'query' # パラメータをパス内に含める
          description: "買い切り商品ID"
          schema:
            type: "integer"
      responses:
        200:
          description: "買い切り商品の一覧を返します"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    id:
                      type: "integer"
                      description: "ID"
                    name:
                      type: "string"
                      description: "買い切り商品名"
        400:
          description: "NG"

  /shop/{type}/exchange/:
    get:
      tags:
        - "ExchangeItem"
      summary: "ポイント交換用商品を取得"
      security:
        - Bearer: []
      operationId: "getEexchange"
      parameters: # リクエストパラメータ
        - name: "type"
          in: 'path' # パラメータをパス内に含める
          description: "ios, androidを指定"
          required: true
          schema:
            type: "string"
        - name: "itemId"
          in: 'query'
          description: "ポイント交換用商品ID"
          schema:
            type: "integer"
      responses:
        200:
          description: "ポイント交換用商品の一覧を返します"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/ExchangeItems'
        400:
          description: "NG"
    post:
      tags:
        - "ExchangeItem"
      summary: "商品交換"
      security:
        - Bearer: []
      operationId: "editEexchange"
      parameters: # リクエストパラメータ
        - name: "type"
          in: 'path' # パラメータをパス内に含める
          description: "ios, androidを指定"
          required: true
          schema:
            type: "string"
        - name: "itemId"
          in: 'query'
          description: "ポイント交換用商品ID"
          required: true
          schema:
            type: "integer"
      responses:
        200:
          description: "OK"
        400:
          description: "NG"

components:
  securitySchemes:
    Bearer:
      type: "http"
      scheme: "bearer"
      description: "Credentials or access token for API"
  schemas:
    UserSearchConditions:
      description: "ユーザー検索条件情報"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        user_id:
          type: "integer"
          description: "ユーザーID"
        order_no:
          type: "integer"
          description: "表示順"
        age_min:
          type: "integer"
          description: "年齢（MIN）"
        age_max:
          type: "integer"
          description: "年齢（MAX）"
        prefecture:
          type: "object"
          items:
            type: "integer"
          description: "居住地"
        height_min:
          type: "integer"
          description: "身長（MIN）"
        height_max:
          type: "integer"
          description: "身長（MAX）"
        body_shape:
          type: "object"
          items:
            type: "integer"
          description: "体型"
        prefecture_of_birth:
          type: "object"
          items:
            type: "integer"
          description: "出身地"
        education:
          type: "object"
          items:
            type: "integer"
          description: "学歴"
        annual_income_min:
          type: "integer"
          description: "年収（MIN）"
        annual_income_max:
          type: "integer"
          description: "年収（MAX）"
        children:
          type: "integer"
          description: "子供の有無"
        job:
          type: "object"
          items:
            type: "integer"
          description: "職業"
        hope_to_meet:
          type: "object"
          items:
            type: "integer"
          description: "出会うまでの希望"
        personality:
          type: "object"
          items:
            type: "integer"
          description: "性格・タイプ"
        favorite_place:
          type: "object"
          items:
            type: "integer"
          description: "よく行く場所"
        hobby:
          type: "object"
          items:
            type: "integer"
          description: "好きなこと・趣味"
        drink:
          type: "boolean"
          description: "お酒"
        cigarettes:
          type: "boolean"
          description: "タバコ"
        holiday:
          type: "object"
          items:
            type: "integer"
          description: "休日"

    Prefectures:
      description: "都道府県マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "都道府県名"

    Gender:
      description: "性別マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: ""

    JobOptions:
      description: "職業マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "職業"

    UserImages:
      description: "ユーザー画像情報"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        storage_path:
          type: "string"
          description: "ストレージパス"
        download_url:
          type: "string"
          description: "画像URL"

    AgeApprovalStatus:
      description: "年齢確認をしたどうかのステータス"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: ""

    FigureOptions:
      description: "体型マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "体型名"

    EducationOptions:
      description: "学歴マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "学歴"

    LanguageOptions:
      description: "使用言語マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: ""

    SiblingOptions:
      description: "兄弟姉妹マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: ""

    SociabilityOptions:
      description: "社交性マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: ""

    HousemateOptions:
      description: "同居人マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: ""

    FutureMoveOptions:
      description: "将来引っ越しマスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: ""

    BloodTypeOptions:
      description: "血液型マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: ""

    MarriageHistoryOptions:
      description: "結婚歴マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: ""

    HasChildrenOptions:
      description: "子供の有無マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "選択肢名"

    SmokingOptions:
      description: "タバコ選択肢マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "名称"

    DrinkOptions:
      description: "お酒選択肢マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "名称"

    PersonalityOptions:
      description: "性格・タイプマスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "名称"

    IncomeOptions:
      description: "年収マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "項目名"

    HolidayOptions:
      description: "休日マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "名称"

    ProcessToMeetOptions:
      description: "出会うまでの希望マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "名称"

    ImportantOptions:
      description: "お相手探しで重視すること"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: ""

    DatingFeeOptions:
      description: "最初のデート料金"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: ""

    LikeTypes:
      description: "いいね種別マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "いいね種別"

    BlockTypes:
      description: "ブロック種別マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "名称"

    UserTemplateTypes:
      description: "ユーザーテンプレート種別マスタ"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "名称"

    UserNotificationSettings:
      description: "ユーザー通知設定情報"
      type: "object"
      properties:
        user_id:
          type: "integer"
          description: "ユーザーID"
        notification_type:
          type: "integer"
          description: "通知タイプ"
        recieved_likes:
          type: "boolean"
          description: "いいね！をもらった時"
        matching:
          type: "boolean"
          description: "マッチングした時"
        recieved_message:
          type: "boolean"
          description: "メッセージをもらった時"
        footprint:
          type: "boolean"
          description: "足あとがついた時"
        others:
          type: "boolean"
          description: "その他のお知らせ"

    ExchangeItems:
      description: "ポイント交換用商品"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        name:
          type: "string"
          description: "交換用商品名"
        consumption_point:
          type: "integer"
          description: "消費ポイント"
        order_no:
          type: "integer"
          description: "表示順"

    UserGetResponse:
      description: "ユーザ一覧"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ユーザーID"
        nickname:
          type: "string"
          nullable: true
          description: "ニックネーム"
        birthday:
          type: "string"
          format: "date"
          nullable: true
          description: "生年月日"
        age:
          type: "integer"
          description: "年齢"
        prefecture: # 居住地
          $ref: '#/components/schemas/Prefectures'
        gender: # 性別
          $ref: '#/components/schemas/Gender'
        height:
          type: "integer"
          description: "身長"
        job: # 職業
          $ref: '#/components/schemas/JobOptions'
        introduction_text:
          type: "string"
          description: "自己紹介"
        image: # 画像
          type: "array"
          items:
            $ref: '#/components/schemas/UserImages'
        # TODO
        numOfLikes:
          type: "integer"
          description: "他ユーザからいいねされた数"
        # TODO
        numOfPoints:
          type: "integer"
          description: "ユーザが現在保持しているポイント数"
        age_approval_status: # 年齢確認ステータス
          $ref: '#/components/schemas/AgeApprovalStatus'
        # TODO:: wisper
        figure: # 体型
          $ref: '#/components/schemas/FigureOptions'
        birth_of_prefecture: # 出身地
          $ref: '#/components/schemas/Prefectures'
        education: # 学歴
          $ref: '#/components/schemas/EducationOptions'
        language: # 使用言語
          $ref: '#/components/schemas/LanguageOptions'
        sibling: # 兄弟姉妹
          $ref: '#/components/schemas/SiblingOptions'
        sociability: # 社交性
          type: "array"
          items:
            $ref: '#/components/schemas/SociabilityOptions'
        housemate: # 同居人
          $ref: '#/components/schemas/HousemateOptions'
        future_move: # 将来引越し可能か
          $ref: '#/components/schemas/FutureMoveOptions'
        blood_type: # 血液型
          $ref: '#/components/schemas/BloodTypeOptions'
        marriage_history: # 結婚歴
          $ref: '#/components/schemas/MarriageHistoryOptions'
        has_child: # 子供
          $ref: '#/components/schemas/HasChildrenOptions'
        smoking: # タバコ
          $ref: '#/components/schemas/SmokingOptions'
        drink: # お酒
          $ref: '#/components/schemas/DrinkOptions'
        personality: # 性格・タイプ
          type: "array"
          items:
            $ref: '#/components/schemas/PersonalityOptions'
        income: # 年収
          $ref: '#/components/schemas/IncomeOptions'
        holiday: # 休日
          type: "array"
          items:
            $ref: '#/components/schemas/HolidayOptions'
        process_to_meet: # 出会うまでの希望
          $ref: '#/components/schemas/ProcessToMeetOptions'
        important: # お相手探しで重視すること
          $ref: '#/components/schemas/ImportantOptions'
        dating_fee: # 最初のデート料金
          $ref: '#/components/schemas/DatingFeeOptions'
      example:
        id: 1
        nickname: "ニックネーム"
        birthday: "2014-10-10"
        age: 20
        prefecture:
          id: 1 # ex)1:東京
          name: "東京"
        gender:
          id: 1 # 男性:1、女性:2
          name: "男性"
        height: 170
        job:
          id: 1 # ex)1:会社員
          name: "会社員"
        introduction_text: "自己紹介"
        image:
          - id: 1
            storage_path: "http://imagePath1"
            download_url: "http://imagePath1"
          - id: 2
            storage_path: "http://imagePath2"
            download_url: "http://imagePath2"
          - id: 3
            storage_path: "http://imagePath3"
            download_url: "http://imagePath3"
          - id: 4
            storage_path: "http://imagePath4"
            download_url: "http://imagePath4"
          - id: 5
            storage_path: "http://imagePath5"
            download_url: "http://imagePath5"
          - id: 6
            storage_path: "http://imagePath6"
            download_url: "http://imagePath6"
        numOfLikes: 100
        numOfPoints: 100
        age_approval_status:
          id: 1 # 1:未審査,2:審査済,3:却下
          name: "未審査"
        # wisper
        figure:
          id: 1 # ex)1:スリム
          name: "スリム"
        birth_of_prefecture:
          id: 1 # ex)1:東京
          name: "東京"
        education:
          id: 1 # ex)1:高卒
          name: "高卒"
        language:
          id: 1 # ex)1:日本語
          name: "日本語"
        sibling:
          id: 1 # ex)ユーザが男性の場合 1:長男,ユーザが女性の場合 1:長女
          name: "長男"
        sociability:
          - id: 1 # ex)1:大人数が好き
            name: "大人数が好き"
        housemate:
          id: 1 # ex)1:一人暮らし
          name: "一人暮らし"
        future_move:
          id: 1 # ex)1:可能
          name: "可能"
        blood_type:
          id: 1 # ex)1:A型
          name: "A型"
        marriageHistory:
          id: 1 # ex)1:未婚
          name: "未婚"
        has_child:
          id: 1 # ex)1:なし
          name: "なし"
        smoking:
          id: 1 # ex)1:吸う
          name: "吸う"
        drink:
          id: 1 # ex)1:飲まない
          name: "飲まない"
        personality:
          - id: 1 # ex)1:優しい
            name: "優しい"
        income:
          id: 1 # ex)1:300万円未満
          name: "300万円未満"
        holiday:
          - id: 1 # ex)1:月曜
            name: "月曜"
          - id: 2
            name: "火曜"
        process_to_meet:
          id: 1 # ex)1:マッチングしたらできるだけ早くまずお会いしてみたい
          name: "マッチングしたらできるだけ早くまずお会いしてみたい"
        important:
          id: 1 # ex)1:年齢・写真の印象
          name: "年齢・写真の印象"
        dating_fee:
          id: 1 # ex)1:初回デート費用
          name: "初回デート費用"

    UserPutRequests:
      description: "ユーザ登録"
      type: "object"
      required:
        - "nickname"
        - "birthday"
      properties:
        nickname:
          type: "string"
          description: "ニックネーム"
        birthday:
          type: "string"
          format: "date"
          description: "生年月日"
        prefecture_id:
          type: "integer"
          description: "居住地"
        gender_id:
          type: "integer"
          description: "性別"
        height:
          type: "integer"
          description: "身長"
        job_id:
          type: "integer"
          description: "職業"
        introduction_text:
          type: "string"
          description: "自己紹介"
        age_approval_status:
          type: "integer"
          description: "年齢確認ステータス"
        # TODO:: wisper
        figure_id:
          type: "integer"
          description: "体型"
        birth_of_prefecture_id:
          type: "integer"
          description: "出身地"
        education_id:
          type: "integer"
          description: "学歴"
        language_id:
          type: "integer"
          description: "使用言語"
        sibling_id:
          type: "integer"
          description: "兄弟姉妹"
        sociability:
          type: "array"
          items:
            type: "integer"
          description: "社交性"
        housemate_id:
          type: "integer"
          description: "同居人"
        future_move_id:
          type: "integer"
          description: "将来引越し可能か"
        blood_type_id:
          type: "integer"
          description: "血液型"
        marriage_history_id:
          type: "integer"
          description: "結婚歴"
        has_child_id:
          type: "integer"
          description: "子供"
        smoking_id:
          type: "integer"
          description: "タバコ"
        drink_id:
          type: "integer"
          description: "お酒"
        personality:
          type: "array"
          items:
            type: "integer"
          description: "性格・タイプ"
        income_id:
          type: "integer"
          description: "年収"
        holiday:
          type: "array"
          items:
            type: "integer"
          description: "休日"
        process_to_meet_id:
          type: "integer"
          description: "出会うまでの希望"
        important_id:
          type: "integer"
          description: "お相手探しで重視すること"
        dating_fee_id:
          type: "integer"
          description: "最初のデート料金"

    UserPostRequests:
      description: "ユーザー更新"
      type: "object"
      required:
        - "id"
      properties:
        id:
          type: "integer"
          description: "ユーザーID"
        nickname:
          type: "string"
          description: "ニックネーム"
        birthday:
          type: "string"
          format: "date"
          description: "生年月日"
        prefecture_id:
          type: "integer"
          description: "居住地"
        gender_id:
          type: "integer"
          description: "性別"
        height:
          type: "integer"
          description: "身長"
        job_id:
          type: "integer"
          description: "職業"
        introduction_text:
          type: "string"
          description: "自己紹介"
        age_approval_status:
          type: "integer"
          description: "年齢確認ステータス"
        # TODO:: wisper
        figure_id:
          type: "integer"
          description: "体型"
        birth_of_prefecture_id:
          type: "integer"
          description: "出身地"
        education_id:
          type: "integer"
          description: "学歴"
        language_id:
          type: "integer"
          description: "使用言語"
        sibling_id:
          type: "integer"
          description: "兄弟姉妹"
        sociability:
          type: "array"
          items:
            type: "integer"
          description: "社交性"
        housemate_id:
          type: "integer"
          description: "同居人"
        future_move_id:
          type: "integer"
          description: "将来引越し可能か"
        blood_type_id:
          type: "integer"
          description: "血液型"
        marriage_history_id:
          type: "integer"
          description: "結婚歴"
        has_child_id:
          type: "integer"
          description: "子供"
        smoking_id:
          type: "integer"
          description: "タバコ"
        drink_id:
          type: "integer"
          description: "お酒"
        personality:
          type: "array"
          items:
            type: "integer"
          description: "性格・タイプ"
        income_id:
          type: "integer"
          description: "年収"
        holiday:
          type: "array"
          items:
            type: "integer"
          description: "休日"
        process_to_meet_id:
          type: "integer"
          description: "出会うまでの希望"
        important_id:
          type: "integer"
          description: "お相手探しで重視すること"
        dating_fee_id:
          type: "integer"
          description: "最初のデート料金"

    LikeGetResponse:
      description: "いいね一覧"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        user_id:
          type: "integer"
          description: "ユーザーID"
        image: # 画像
          type: "array"
          items:
            $ref: '#/components/schemas/UserImages'
        nickname:
          type: "string"
          nullable: true
          description: "ニックネーム"
        birthday:
          type: "string"
          format: "date"
          nullable: true
          description: "生年月日"
        age:
          type: "integer"
          description: "年齢"
        prefecture: # 居住地
          $ref: '#/components/schemas/Prefectures'
        height:
          type: "integer"
          description: "身長"
        job: # 職業
          $ref: '#/components/schemas/JobOptions'
        type: # いいね種別
          $ref: '#/components/schemas/LikeTypes'
        liked_at:
          type: "string"
          format: "date-time"
      example:
        id: 1
        user_id: 1
        image:
          - id: 1
            storage_path: "http://imagePath1"
            download_url: "http://imagePath1"
        nickname: "ニックネーム"
        birthday: "2014-10-10"
        age: 20
        prefecture:
          id: 1 # ex)1:東京
          name: "東京"
        height: 170
        job:
          id: 1 # ex)1:会社員
          name: "会社員"
        type:
          id: 1
          name: "通常"
        liked_at: "2014-10-10T13:50:40+09:00"

    SkipGetResponse:
      description: "スキップ一覧"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        user_id:
          type: "integer"
          description: "ユーザーID"
        image: # 画像
          type: "array"
          items:
            $ref: '#/components/schemas/UserImages'
        nickname:
          type: "string"
          nullable: true
          description: "ニックネーム"
        birthday:
          type: "string"
          format: "date"
          nullable: true
          description: "生年月日"
        age:
          type: "integer"
          description: "年齢"
        prefecture: # 居住地
          $ref: '#/components/schemas/Prefectures'
        height:
          type: "integer"
          description: "身長"
        job: # 職業
          $ref: '#/components/schemas/JobOptions'
        skipped_at: # スキップ日時
          type: "string"
          format: "date-time"
      example:
        id: 1
        user_id: 1
        image:
          - id: 1
            storage_path: "http://imagePath1"
            download_url: "http://imagePath1"
        nickname: "ニックネーム"
        birthday: "2014-10-10"
        age: 20
        prefecture:
          id: 1 # ex)1:東京
          name: "東京"
        height: 170
        job:
          id: 1 # ex)1:会社員
          name: "会社員"
        skipped_at: "2014-10-10T13:50:40+09:00"

    BlockGetResponse:
      description: "ブロック一覧"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ID"
        user_id:
          type: "integer"
          description: "ユーザーID"
        image: # 画像
          type: "array"
          items:
            $ref: '#/components/schemas/UserImages'
        nickname:
          type: "string"
          nullable: true
          description: "ニックネーム"
        birthday:
          type: "string"
          format: "date"
          nullable: true
          description: "生年月日"
        age:
          type: "integer"
          description: "年齢"
        prefecture: # 居住地
          $ref: '#/components/schemas/Prefectures'
        height:
          type: "integer"
          description: "身長"
        job: # 職業
          $ref: '#/components/schemas/JobOptions'
        reason: # ブロック理由
          $ref: '#/components/schemas/BlockTypes'
      example:
        id: 1
        user_id: 1
        image:
          - id: 1
            storage_path: "http://imagePath1"
            download_url: "http://imagePath1"
        nickname: "ニックネーム"
        birthday: "2014-10-10"
        age: 20
        prefecture:
          id: 1 # ex)1:東京
          name: "東京"
        height: 170
        job:
          id: 1 # ex)1:会社員
          name: "会社員"
        reason:
          id: 1
          name: "ブロック名称"

    SearchPutAndPostRequest:
      description: "ユーザー検索条件情報"
      type: "object"
      properties:
        order_no:
          type: "integer"
          description: "表示順"
        age_min:
          type: "integer"
          description: "年齢（MIN）"
        age_max:
          type: "integer"
          description: "年齢（MAX）"
        prefecture:
          type: "object"
          items:
            type: "integer"
          description: "居住地"
        height_min:
          type: "integer"
          description: "身長（MIN）"
        height_max:
          type: "integer"
          description: "身長（MAX）"
        body_shape:
          type: "object"
          items:
            type: "integer"
          description: "体型"
        prefecture_of_birth:
          type: "object"
          items:
            type: "integer"
          description: "出身地"
        education:
          type: "object"
          items:
            type: "integer"
          description: "学歴"
        annual_income_min:
          type: "integer"
          description: "年収（MIN）"
        annual_income_max:
          type: "integer"
          description: "年収（MAX）"
        children:
          type: "integer"
          description: "子供の有無"
        job:
          type: "object"
          items:
            type: "integer"
          description: "職業"
        hope_to_meet:
          type: "object"
          items:
            type: "integer"
          description: "出会うまでの希望"
        personality:
          type: "object"
          items:
            type: "integer"
          description: "性格・タイプ"
        favorite_place:
          type: "object"
          items:
            type: "integer"
          description: "よく行く場所"
        hobby:
          type: "object"
          items:
            type: "integer"
          description: "好きなこと・趣味"
        drink:
          type: "boolean"
          description: "お酒"
        cigarettes:
          type: "boolean"
          description: "タバコ"
        holiday:
          type: "object"
          items:
            type: "integer"
          description: "休日"

    ChatRoomGetResponse:
      description: "チャットルーム一覧"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "チャットルームID"
        user_id:
          type: "integer"
          description: "ユーザーID"
        image: # 画像
          type: "array"
          items:
            $ref: '#/components/schemas/UserImages'
        nickname:
          type: "string"
          nullable: true
          description: "ニックネーム"
        birthday:
          type: "string"
          format: "date"
          nullable: true
          description: "生年月日"
        age:
          type: "integer"
          description: "年齢"
        prefecture: # 居住地
          $ref: '#/components/schemas/Prefectures'
        height:
          type: "integer"
          description: "身長"
        job: # 職業
          $ref: '#/components/schemas/JobOptions'

      example:
        id: 1
        user_id: 1
        image:
          - id: 1
            storage_path: "http://imagePath1"
            download_url: "http://imagePath1"
        nickname: "ニックネーム"
        birthday: "2014-10-10"
        age: 20
        prefecture:
          id: 1 # ex)1:東京
          name: "東京"
        height: 170
        job:
          id: 1 # ex)1:会社員
          name: "会社員"

    MessageGetResponse:
      description: "メッセージ一覧"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "メッセージID"
        chat_room_id:
          type: "integer"
          description: "チャットルームID"
        user_id:
          type: "integer"
          description: "ユーザーID"
        message:
          type: "string"
          description: "メッセージ"
        created_at:
          type: "string"
          format: "date-time"
          description: "作成日時"
        updated_at:
          type: "string"
          format: "date-time"
          description: "更新日時"
      example:
        id: 1
        chat_room_id: 1
        user_id: 1
        message: "メッセージ"
        created_at: "2014-10-10T13:50:40+09:00"
        updated_at: "2014-10-10T13:50:40+09:00"

    NotificationGetResponse:
      description: "お知らせ一覧"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "お知らせID"
        title:
          type: "string"
          description: "タイトル"
        text:
          type: "string"
          description: "本文"
      example:
        id: 1
        title: "タイトル"
        text: "本文"

    TemplateGetResponse:
      description: "メッセージテンプレート一覧"
      type: "object"
      properties:
        id:
          type: "integer"
          description: "ユーザーテンプレートID"
        type:
          $ref: '#/components/schemas/UserTemplateTypes'
        contents:
          type: "string"
          description: "本文"
      example:
        id: 1
        type:
          id: 1
          name: "種別名"
        contents: "本文"
